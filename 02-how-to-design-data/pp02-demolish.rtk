#lang htdp/bsl
(require 2htdp/image)

;; ================
;; DATA DEFINITIONS

;
; PROBLEM A:
;
; You are assigned to develop a system that will classify
; buildings in downtown Vancouver based on how old they are.
; According to city guidelines, there are three different
; classification levels: new, old, and heritage.
;
; Design a data definition to represent these classification levels.
; Call it BuildingStatus.
;

;; BuildingStatus is one of:
;;  - "new"
;;  - "old"
;;  - "heritage"
;; Interp: The classification levels for the buildings.
;; <examples are redundant for enumerations>

(define (fn-for-building-status bs)
  (cond [(string=? "new" bs) (...)]
        [(string=? "old" bs) (...)]
        [(string=? "heritage" bs) (...)]))
;; Template rules used:
;;  - one of: 3 cases:
;;  - atomic distinct: "new"
;;  - atomic distinct: "old"
;;  - atomic distinct: "heritage"

;; =========
;; FUNCTIONS

;
; PROBLEM B:
;
; The city wants to demolish all buildings classified as "old".
; You are hired to design a function called demolish?
; that determines whether a building should be torn down or not.
;

;; BuildingStatus -> Boolean
;; Produce #true if building status is "old".
(check-expect (demolish? "new") #false)
(check-expect (demolish? "old") #true)
(check-expect (demolish? "heritage") #false)

;(define (demolish? bs) #false) ;stub

;<use template from BuildingStatus>
(define (demolish? bs)
  (string=? bs "old"))

;; Why use all three conds in the templateâ€½

